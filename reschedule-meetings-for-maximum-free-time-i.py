###############################################################################
# 
# find k adjacent meetings with highest total duration of adjacent free time 
# output is sum of the k+1 gaps surrounding these meetings.
# 
# find the meeting which has the largest adjacent gap of free time
# move the meeting towards the gap with magnitude equal to the gap
# for i in range k
# Note: meetings moved should all be adjacent
# Problems: 1. how do you determine which meeting to move if i!=k
# 2. if the biggest gap is 
# 
# ___--____--__--_ k = 2
# case: i = 2 (start meeting is last) 
# k > 1
# 
###############################################################################

class Solution(object):
    def maxFreeTime(self, eventTime, k, startTime, endTime):
        """
        :type eventTime: int
        :type k: int
        :type startTime: List[int]
        :type endTime: List[int]
        :rtype: int
        """
        # initialize highest possible free time var
        max_free_time = 0
        # each iteration, sum the free times which can be consolidated
        for i in range(len(startTime)):
            # initialize left bound of free time
            if i!=0:    
                temp_free_time = startTime[i] - endTime[i-1]
            else:
                temp_free_time = startTime[i]
                
            # to sum, since k is variable, iterate
            for j in range(k):
                if i + j < len(endTime) - 1:
                    temp_free_time += startTime[i+j+1] - endTime[i+j]
                elif i + j < len(endTime): 
                    temp_free_time += eventTime - endTime[i+j]
            
            # now check if temp is max
            max_free_time = max(max_free_time, temp_free_time)
        
        return max_free_time


                


if __name__ == "__main__":
    # Example usage
    # solution = Solution()
    # eventTime = 5   # Populate with event times
    # k = 1           # Set the value of k
    # startTime = [1,3]  # Populate with start times
    # endTime = [2,5]    # Populate with end times
    # max_free_time = solution.maxFreeTime(eventTime, k, startTime, endTime)
    # print("Maximum free time:", max_free_time)

    # solution = Solution()
    # eventTime = 10   # Populate with event times
    # k = 1           # Set the value of k
    # startTime = [0,2,9]  # Populate with start times
    # endTime = [1,4,10]    # Populate with end times
    # max_free_time = solution.maxFreeTime(eventTime, k, startTime, endTime)
    # print("Maximum free time:", max_free_time)

    # solution = Solution()
    # eventTime = 5   # Populate with event times
    # k = 2           # Set the value of k
    # startTime = [0,1,2,3,4]  # Populate with start times
    # endTime = [1,2,3,4,5]    # Populate with end times
    # max_free_time = solution.maxFreeTime(eventTime, k, startTime, endTime)
    # print("Maximum free time:", max_free_time)

    solution = Solution()
    eventTime = 67510777   # Populate with event times
    k = 345           # Set the value of k
    startTime = [34635,66565,113550,126675,136965,137264,377789,594271,706394,991810,993141,993652,993745,993751,993781,993799,994148,994169,994170,1050631,1134772,1137600,1137623,1142687,1142883,1142995,1142997,1142998,1142999,1143011,1143026,1143028,1143029,1161492,1189423,1190261,1192015,1418453,1418479,1418663,1419495,1424420,1424802,1425993,1426010,1426011,1426014,1426028,1426036,1427185,1427513,1427833,1428372,1428522,1429110,1429126,1429127,1429772,1430096,1430164,1430187,1430195,1430198,1430199,1430200,1430205,1430227,1430231,1430292,1430293,1430305,1430307,1430310,1430311,1430706,1430707,1430708,1430715,1430719,1430776,1731709,1739961,1753039,1753256,1753484,1753772,1760275,1760299,1760300,1760301,1760404,1760439,1760463,1760508,1760510,1770024,1770745,1771957,1771985,1779992,1781782,1782575,1783363,1783425,1783539,1783628,1784938,1784939,1784941,1784942,1784944,1785284,1785362,1785367,1785369,1785386,1785413,1785414,1785415,1785416,1799029,1810179,1822824,1832808,1832816,1832820,1832821,1832822,1832840,1832842,1832847,7707293,7803078,7849789,7862587,7871301,7872650,7990678,8124195,8141486,8187709,8194631,8195307,8202955,8205024,8279527,8279816,8279857,8280061,8280156,8281164,8281255,8281260,8281262,8281825,8281831,8281885,8281959,8282358,8283836,8283894,8283976,8300964,8303299,8309315,8842423,8881395,8881719,8886488,8886755,8888089,8888096,8888107,10213735,10221223,10221776,10282943,10323134,10323143,10323224,10323235,10323272,10323280,10323497,10324260,10324869,10325004,10333238,10333294,10333393,10333397,10333402,10333403,10333404,10333418,10334064,10334200,10334302,10334354,10334533,18301570,18334187,18336036,18336260,18339669,18341878,18343425,18347994,18347995,18348007,18349911,18349959,18349967,18349971,18349974,18349980,18349982,18349983,18349984,18351866,18351945,18352158,18353068,18353258,18353333,18353334,18353336,18353337,18353360,18353640,18353698,18353979,18354308,18354324,18354377,18354399,18354402,18354691,18354701,18354702,18354703,18354734,18354737,18354740,18354742,18354743,18421345,18423501,18431414,18440455,18916538,18934749,18947372,18965498,18970380,18972460,18977338,18977864,18977884,18988251,18988302,18990073,18990499,18995265,18995498,18996188,18996398,18996486,18996538,18997187,19216719,19265644,19277294,19277885,19321389,44821431,47687146,48034172,48213956,48260801,48267639,48934305,49164041,49164204,49164755,49261727,49698488,49731346,50056953,50369568,62234378,62244027,62294328,62294800,62295453,62399750,62403731,62419145,62419889,62420632,62421274,62421357,62421379,62421396,62697349,62707917,62708367,62708376,62709526,62725230,62726556,62748575,62748768,62749109,62749233,62873703,62874756,62874774,62874850,62874856,62874861,62960974,62961195,62961319,62961323,62961416,62961482,62962316,62963093,62963185,62963352,62964177,62964194,62964203,62964356,62964367,63117736,63117808,63118061,63118311,63118319,63193902,63198935,63203271,63207861,63208015,63209222,63209269,63209271,63209279,63209300,63209303,63209312,63209313,63412666,63412750,63413353,63413582,63414021,63414097,63414108,63414125,63414127,63422718,63431179,63431797,63431952,63437308,63441930,63456757,63464287,63465715,63465878,63475879,63475970,63476956,63477630,63477643,63477739,63486975,63487181,63487526,63488932,63525664,63527878,63528406,63528470,63528508,63529793,63529840,63529851,63533931,63533945,63533994,63534055,63534080,63534084,63534085,63534086,63534141,63534947,63534981,63535073,63535089,63535092,63535093,63535096,63535101,63535102,63538477,63538546,63539088,65718892,65723310,65723860,65723965,65723985,65724764,65724769,65724955,65789630,65806274,66731708,66771259,66800357,66805287,66844043,66853262,66856850,66857652,66857889,66919079,67209360,67246129,67246154,67246191,67249885,67250335,67262083,67316661,67382355,67383306,67384263,67403992,67404771,67405957,67406321,67406431,67408746,67415647,67415677,67419062,67419063,67419064,67419069,67419072,67419184,67419186,67419188,67419541,67419614,67419623,67419625,67419761,67419788,67419796,67419798,67419814,67419867,67420955,67420959,67420972,67420973,67420975,67420978,67420979,67420986,67420987,67420993,67421002,67421003,67421117,67421124,67421125,67421209,67421210,67421212,67421224,67421226,67421235,67421236,67496112,67508277,67509222,67509237,67510628,67510636,67510660,67510698,67510701]  # Populate with start times
    endTime = [64649,66675,119995,136867,137064,340059,506023,602600,991434,992464,993210,993736,993749,993779,993790,994095,994169,994170,1012614,1134654,1135784,1137603,1141162,1142883,1142995,1142996,1142998,1142999,1143005,1143026,1143028,1143029,1161478,1169873,1190157,1191671,1418324,1418471,1418484,1418668,1423403,1424478,1425321,1426010,1426011,1426013,1426020,1426033,1426968,1427283,1427592,1428037,1428510,1429078,1429119,1429127,1429377,1429829,1430162,1430186,1430195,1430198,1430199,1430200,1430203,1430227,1430231,1430290,1430293,1430305,1430307,1430310,1430311,1430705,1430707,1430708,1430715,1430717,1430776,1710677,1732148,1751944,1753215,1753437,1753654,1757942,1760283,1760300,1760301,1760378,1760426,1760448,1760506,1760510,1769952,1770026,1771925,1771985,1779867,1780780,1782023,1783350,1783370,1783433,1783621,1784938,1784939,1784940,1784942,1784944,1785271,1785319,1785363,1785369,1785377,1785413,1785414,1785415,1785416,1798071,1803511,1814395,1832801,1832810,1832820,1832821,1832822,1832840,1832841,1832847,7438609,7788736,7842702,7857165,7864855,7871781,7989200,8076606,8134683,8183146,8193849,8194899,8201386,8204413,8279158,8279758,8279839,8279868,8280121,8281128,8281232,8281260,8281261,8281825,8281826,8281873,8281940,8282281,8283785,8283845,8283960,8299455,8303187,8308829,8840036,8880893,8881513,8885468,8886575,8888078,8888092,8888106,10210269,10214540,10221707,10272320,10323128,10323140,10323222,10323226,10323250,10323273,10323354,10324037,10324863,10324968,10333205,10333293,10333353,10333396,10333398,10333403,10333404,10333410,10333927,10334076,10334240,10334309,10334368,18288722,18322378,18335706,18336088,18339638,18340471,18342855,18347992,18347995,18347996,18349729,18349912,18349966,18349971,18349974,18349980,18349982,18349983,18349984,18351858,18351937,18352094,18353035,18353078,18353331,18353334,18353336,18353337,18353347,18353604,18353648,18353804,18354307,18354319,18354368,18354390,18354402,18354685,18354701,18354702,18354703,18354720,18354737,18354740,18354742,18354743,18412980,18422415,18428601,18439444,18693427,18929333,18939603,18963397,18968061,18970457,18973263,18977851,18977881,18987683,18988282,18989392,18990140,18995148,18995429,18996008,18996222,18996440,18996520,18996910,19113121,19265399,19268686,19277506,19294357,41650289,45586580,47759222,48196369,48257386,48260804,48614159,49164039,49164068,49164246,49200188,49531407,49713047,49844814,50318211,62233901,62236366,62293938,62294597,62295438,62384656,62403297,62416488,62419364,62420277,62421245,62421295,62421366,62421392,62692716,62707882,62708076,62708371,62708921,62712010,62726084,62739796,62748763,62749031,62749220,62870544,62874164,62874760,62874830,62874853,62874861,62959415,62961086,62961314,62961321,62961380,62961435,62961692,62962769,62963176,62963296,62964155,62964184,62964199,62964331,62964363,63095961,63117760,63117862,63118279,63118319,63191718,63198813,63200669,63207773,63207884,63208234,63209267,63209271,63209274,63209294,63209303,63209312,63209313,63412130,63412710,63412868,63413512,63413944,63414073,63414100,63414124,63414127,63418022,63430964,63431306,63431909,63435229,63437718,63452457,63464237,63465690,63465835,63475618,63475931,63476790,63477056,63477636,63477651,63486171,63487129,63487346,63488166,63514924,63527749,63527906,63528411,63528473,63529420,63529796,63529847,63533863,63533940,63533973,63534009,63534062,63534081,63534085,63534086,63534087,63534724,63534967,63535042,63535089,63535092,63535093,63535096,63535098,63535102,63537578,63538512,63538866,65706679,65721895,65723535,65723941,65723969,65724737,65724769,65724849,65784860,65795076,66335715,66741004,66795649,66801422,66839491,66849674,66855227,66857632,66857806,66918498,67183328,67246033,67246147,67246185,67248707,67250330,67254301,67303982,67358413,67383268,67384066,67400676,67404142,67405246,67406189,67406413,67407598,67414695,67415660,67419062,67419063,67419064,67419069,67419070,67419172,67419186,67419187,67419416,67419571,67419623,67419625,67419699,67419778,67419796,67419798,67419807,67419818,67420955,67420957,67420972,67420973,67420975,67420976,67420979,67420986,67420987,67420991,67420994,67421003,67421113,67421122,67421125,67421209,67421210,67421211,67421224,67421226,67421235,67421236,67473224,67508062,67508773,67509231,67510619,67510629,67510647,67510691,67510699,67510770]    # Populate with end times
    print(len(startTime))
    print(len(endTime))
    # max_free_time = solution.maxFreeTime(eventTime, k, startTime, endTime)
    # print("Maximum free time:", max_free_time)